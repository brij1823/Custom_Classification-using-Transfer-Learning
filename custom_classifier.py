# -*- coding: utf-8 -*-
"""Custom_Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hui7K23fRg7Um6SPk9Q2I-7HrIzFrGu6
"""

# Load the Drive helper and mount
from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/My Drive/custom

ls

import numpy as np
import matplotlib.pyplot as plt
import os
import cv2

datadir = 'images/'
categories = ['sasuke' , 'naruto']

for cate in categories:
  path = os.path.join(datadir , cate)
  for img in os.listdir(path):
    img_array =  cv2.imread(os.path.join(path,img) , cv2.IMREAD_GRAYSCALE)
    plt.imshow(img_array , cmap = "gray")
    plt.show()
    break
  break

IMG_SIZE = 200
new_array = cv2.resize(img_array , (IMG_SIZE , IMG_SIZE))
plt.imshow(new_array, cmap = 'gray')
plt.show()

training_data = []

def creating_training_data():
  for cate in categories:
    try:
      path = os.path.join(datadir , cate)
      class_num = categories.index(cate)
      for img in os.listdir(path):
        img_array =  cv2.imread(os.path.join(path,img))
        new_array = cv2.resize(img_array , (IMG_SIZE,IMG_SIZE)).astype('uint8')
        training_data.append([new_array , class_num])
    except Exception as e:
      pass
creating_training_data()

print(len(training_data))



import random 
random.shuffle(training_data)

X = []
y = []
for features , label in training_data:
  X.append(features)
  y.append(label)
  
X = np.array(X).reshape(-1,IMG_SIZE , IMG_SIZE , 3)

X

import pickle

pickle_out = open('X.pickle' , 'wb')
pickle.dump(X , pickle_out)
pickle_out.close()

pickle_out = open('y.pickle' , 'wb')
pickle.dump(y , pickle_out)
pickle_out.close()

pickle_in = open('X.pickle' , "rb")
X = pickle.load(pickle_in)

X

from tqdm import tqdm, tqdm_notebook
from keras.models import Sequential
from keras.layers import Activation, Dropout, Flatten, Dense,Conv2D,MaxPooling2D
from keras.applications import VGG16
from keras.optimizers import Adam
import pickle

pickle_in = open('X.pickle' , "rb")
X = pickle.load(pickle_in)

y = pickle.load(open('y.pickle' , 'rb'))

X = X/255.0

vgg16_net = VGG16(weights='imagenet', 
                  include_top=False, 
                  input_shape=(200, 200, 3))

vgg16_net.trainable = True
model = Sequential()     #Starting Point
model.add(vgg16_net)
model.add(Flatten())
model.add(Dense(256))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(1))
model.add(Activation('sigmoid'))


model.compile(loss='binary_crossentropy',
              optimizer=Adam(lr=1e-5), 
              metrics=['accuracy'])

model.fit(X,y,batch_size = 32 ,epochs = 30, validation_split = 0.1)

img_array =  cv2.imread('midoriya_ex.jpg')

new_img = cv2.resize(img_array , (IMG_SIZE,IMG_SIZE)).astype('uint8')

new_img = np.array(new_img).reshape(-1,IMG_SIZE , IMG_SIZE , 3)

new_img = new_img/255.0

model.predict(new_img)

